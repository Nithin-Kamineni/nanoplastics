library(plumber)
#setwd(dir = here::here())
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory to the script's directory
setwd(script_dir)
# r <- plumber::plumb(file = 'testAPIget.R')
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
# r <- plumber::plumb(file = 'testAPIget.R')
r <- plumber::plumb(file = 'R-api.R')
## Input data set for model calibration/ oral
setwd("C:/profitional/nanoplastics/R-server/input data")
library(plumber)
library(plumber)
#setwd(dir = here::here())
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory to the script's directory
setwd(script_dir)
# r <- plumber::plumb(file = 'testAPIget.R')
r <- plumber::plumb(file = 'R-api.R')
# r <- plumber::plumb(file = 'testAPIget.R')
r <- plumber::plumb(file = 'R-api.R')
plumb(file='R-api.R')$run()
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
# r <- plumber::plumb(file = 'testAPIget.R')
r <- plumber::plumb(file = 'R-api.R')
library(plumber)
#setwd(dir = here::here())
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory to the script's directory
setwd(script_dir)
# r <- plumber::plumb(file = 'testAPIget.R')
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r$registerHooks(
list(
"plumber.middleware" = plumber::plumberMiddleware(
cors = plumber::cors(
origins = "*",
# Specify which HTTP methods are allowed
methods = c("GET", "POST", "PUT", "DELETE", "OPTIONS"),
# Specify allowed headers, if necessary
headers = NULL,
# Allow credentials, if necessary
credentials = FALSE,
# Configure preflight cache duration, if necessary
maxAge = NULL
)
)
)
)
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
library(plumber)
#setwd(dir = here::here())
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory to the script's directory
setwd(script_dir)
r <- plumber::plumb(file = 'R-api.R')
r$registerGlobalFilter(function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
plumber::forward()
})
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
plumber::forward()
}
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$addEndpoint('http://127.0.0.1:3202')
r$onHeaders("Access-Control-Allow-Origin", "*")
plumb(file='runapi.R')$run()
plumb(file='runapi.R')$run()
plumber::forward()
r$filters(cors)
#* @filter cors
cors <- function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
plumber::forward()
}
r$filters(cors)
library(plumber)
#setwd(dir = here::here())
script_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory to the script's directory
setwd(script_dir)
r <- plumber::plumb(file = 'R-api.R')
#* @filter cors
r <- function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
plumber::forward()
}
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
plumb(file='runapi.R')$run()
plumb(file='R-api.R')$run()
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
plumb(file='R-api.R')$run()
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
plumb(file='R-api.R')$run()
plumb(file='R-api.R')$run()
plumb(file='R-api.R')$run()
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
plumb(file='R-api.R')$run()
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
plumb(file='R-api.R')$run()
plumb(file='R-api.R')$run()
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
plumber::plumb(file='R-api.R')$run()
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
plumb(file='R-api.R')$run()
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9000, host="0.0.0.0", swagger=TRUE)
R
R.version()
r.version()
R. Version()
version[['version.string']]
plumber::plumb(file='R-api.R')$run()
library(plumber)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9005, host="0.0.0.0", swagger=TRUE)
r <- plumber::plumb(file = 'R-api.R')
r$run(port = 9005, host="0.0.0.0", swagger=TRUE)
